// <auto-generated />
using EfCoreData.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EfCoreData.Migrations
{
    [DbContext(typeof(BoardGamesDbContext))]
    partial class BoardGamesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.BoardGame", b =>
                {
                    b.Property<int>("BoardGameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Sqlite:Autoincrement", true)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("MaxPlayers")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MinPlayers")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MinRecommendedAge")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.HasKey("BoardGameId");

                    b.HasIndex("Name", "MaxPlayers", "MinPlayers", "MinRecommendedAge")
                        .IsUnique();

                    b.ToTable("BoardGames");

                    b.HasCheckConstraint("min_age_constraint", "MinRecommendedAge >= 3 AND MinRecommendedAge <= 18");

                    b.HasCheckConstraint("min_players_constraint", "MinPlayers >= 1");

                    b.HasCheckConstraint("max_players_constraint", "MaxPlayers >= 1");
                });
#pragma warning restore 612, 618
        }
    }
}
